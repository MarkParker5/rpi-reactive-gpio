name: Publish to PyPI and Create Release

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Version bump
        id: version
        run: |
          if [[ "v$(poetry version --short)" == "$(git describe --tags --always --abbrev=0)" ]]; then
            poetry version patch
            git add pyproject.toml
            git config --global user.email "markparker.it@gmail.com"
            git config --global user.name "MarkParker5"
            git commit -m "Version bump v$(poetry version --short)"
            git push
            echo Version bumped to $(poetry version --short)
          fi
          echo Using version $(poetry version --short)
          echo VERSION="v$(poetry version --short)" >> $GITHUB_OUTPUT

      - name: Build distribution
        run: poetry build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{ steps.version.outputs.VERSION }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          release_name: Release v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload .whl file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/*.whl
          asset_name: my_project-${{ steps.version.outputs.VERSION }}.whl
          asset_content_type: application/zip
